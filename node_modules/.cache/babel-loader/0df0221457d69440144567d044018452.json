{"ast":null,"code":"var _jsxFileName = \"/Users/angela.yu/Desktop/my-app/src/App/RadomColor.js\";\nimport React, { useState, useEffect } from 'react';\nimport * as R from 'ramda';\n\nfunction RadomColor({\n  isRadomPage\n}) {\n  const hasData = R.compose(R.not, R.either(R.isNil, R.isEmpty));\n  const BOX_NUMBER = 2; // const [color,setColor] = useState('rgb(2,5,8)')\n\n  let color;\n\n  function fetchColor() {\n    const r = function () {\n      return Math.floor(Math.random() * 256);\n    }; // return setColor(`rgb(${r()},${r()},${r()})`)\n\n\n    return color = `rgb(${r()},${r()},${r()})`;\n  } // let box =[\n  //   {\n  //     'id': 0,\n  //     'color': 'rgb(255, 5, 255)'\n  //   },\n  //   {\n  //     'id': 1,\n  //     'color': 'rgb(255, 255, 5)'\n  //   }\n  // ]\n\n\n  let box = [];\n  const [data, setData] = useState(box);\n\n  for (let i = 0; i < BOX_NUMBER; i++) {\n    fetchColor();\n    const item = {};\n    item['id'] = i;\n    item['color'] = color;\n    box.push(item);\n  }\n\n  const changeColor = id => {\n    fetchColor();\n    const item = {\n      'id': id,\n      'color': color\n    };\n    box.splice(id, 1, item);\n    setData(box);\n    console.log('click', id);\n  };\n\n  useEffect(() => {\n    fetchColor();\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"RadomColor\",\n    style: {\n      display: isRadomPage ? 'flex' : 'none'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, hasData(data) && data.map(item => React.createElement(\"div\", {\n    className: \"radomDiv\",\n    key: item.id,\n    id: item.id,\n    style: {\n      backgroundColor: item.color\n    },\n    onClick: () => {\n      changeColor(item.id);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })));\n}\n\nexport default RadomColor;","map":{"version":3,"sources":["/Users/angela.yu/Desktop/my-app/src/App/RadomColor.js"],"names":["React","useState","useEffect","R","RadomColor","isRadomPage","hasData","compose","not","either","isNil","isEmpty","BOX_NUMBER","color","fetchColor","r","Math","floor","random","box","data","setData","i","item","push","changeColor","id","splice","console","log","display","map","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA2BC,SAA3B,QAA2C,OAA3C;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB;;AAEA,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAoC;AAC9B,QAAMC,OAAO,GAAGH,CAAC,CAACI,OAAF,CACdJ,CAAC,CAACK,GADY,EAEdL,CAAC,CAACM,MAAF,CAASN,CAAC,CAACO,KAAX,EAAkBP,CAAC,CAACQ,OAApB,CAFc,CAAhB;AAKA,QAAMC,UAAU,GAAG,CAAnB,CAN8B,CAS9B;;AACD,MAAIC,KAAJ;;AACC,WAASC,UAAT,GAAuB;AACnB,UAAMC,CAAC,GAAG,YAAY;AAAE,aAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,GAAzB,CAAP;AAAsC,KAA9D,CADmB,CAEnB;;;AACF,WAAOL,KAAK,GAAI,OAAME,CAAC,EAAG,IAAGA,CAAC,EAAG,IAAGA,CAAC,EAAG,GAAxC;AACD,GAf6B,CAiB9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACD,MAAII,GAAG,GAAG,EAAV;AACC,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBpB,QAAQ,CAACkB,GAAD,CAA/B;;AACA,OAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGV,UAAnB,EAA+BU,CAAC,EAAhC,EAAqC;AACnCR,IAAAA,UAAU;AACV,UAAMS,IAAI,GAAG,EAAb;AACAA,IAAAA,IAAI,CAAC,IAAD,CAAJ,GAAaD,CAAb;AACAC,IAAAA,IAAI,CAAC,OAAD,CAAJ,GAAgBV,KAAhB;AACAM,IAAAA,GAAG,CAACK,IAAJ,CAASD,IAAT;AACD;;AAED,QAAME,WAAW,GAAGC,EAAE,IAAI;AACxBZ,IAAAA,UAAU;AACV,UAAMS,IAAI,GAAG;AACX,YAAMG,EADK;AAEX,eAASb;AAFE,KAAb;AAKAM,IAAAA,GAAG,CAACQ,MAAJ,CAAWD,EAAX,EAAe,CAAf,EAAkBH,IAAlB;AACAF,IAAAA,OAAO,CAACF,GAAD,CAAP;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBH,EAApB;AAED,GAXD;;AAaAxB,EAAAA,SAAS,CAAC,MAAM;AAEdY,IAAAA,UAAU;AAEX,GAJQ,EAIP,EAJO,CAAT;AAKA,SACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAA4B,IAAA,KAAK,EAAE;AAACgB,MAAAA,OAAO,EAAEzB,WAAW,GAAG,MAAH,GAAY;AAAjC,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,OAAO,CAACc,IAAD,CAAP,IAAiBA,IAAI,CAACW,GAAL,CAASR,IAAI,IAC3B;AACE,IAAA,SAAS,EAAG,UADd;AAEE,IAAA,GAAG,EAAIA,IAAI,CAACG,EAFd;AAGE,IAAA,EAAE,EAAIH,IAAI,CAACG,EAHb;AAIE,IAAA,KAAK,EAAI;AAACM,MAAAA,eAAe,EAAET,IAAI,CAACV;AAAvB,KAJX;AAKE,IAAA,OAAO,EAAI,MAAM;AACfY,MAAAA,WAAW,CAACF,IAAI,CAACG,EAAN,CAAX;AACD,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADc,CADpB,CADJ;AAgBL;;AAED,eAAetB,UAAf","sourcesContent":["import React, { useState , useEffect} from 'react'\nimport * as R from 'ramda'\n\nfunction RadomColor({ isRadomPage }){\n      const hasData = R.compose(\n        R.not,\n        R.either(R.isNil, R.isEmpty)\n      ) \n      \n      const BOX_NUMBER = 2\n      \n      \n      // const [color,setColor] = useState('rgb(2,5,8)')\n     let color\n      function fetchColor () { \n          const r = function () { return Math.floor(Math.random()*256) }\n          // return setColor(`rgb(${r()},${r()},${r()})`)\n        return color = `rgb(${r()},${r()},${r()})`\n      }\n      \n      // let box =[\n      //   {\n      //     'id': 0,\n      //     'color': 'rgb(255, 5, 255)'\n      //   },\n      //   {\n      //     'id': 1,\n      //     'color': 'rgb(255, 255, 5)'\n      //   }\n      // ]\n     let box = []\n      const [data,setData] = useState(box)\n      for(let i = 0; i < BOX_NUMBER; i ++) {\n        fetchColor()\n        const item = {}\n        item['id'] = i\n        item['color'] = color\n        box.push(item)\n      }\n\n      const changeColor = id => {\n        fetchColor()\n        const item = {\n          'id': id,\n          'color': color\n        }\n      \n        box.splice(id, 1, item)\n        setData(box)\n        console.log('click',id)\n        \n      }\n\n      useEffect(() => {\n\n        fetchColor()\n\n      },[])\n      return (\n          <div className='RadomColor' style={{display: isRadomPage ? 'flex' : 'none'}}>\n            {hasData(data) && data.map(item => (\n                <div\n                  className = \"radomDiv\"\n                  key = {item.id}\n                  id = {item.id}\n                  style = {{backgroundColor: item.color }}\n                  onClick = {() => {\n                    changeColor(item.id)\n                  }}\n                />\n            ))}\n          </div>\n      \n      )\n}\n\nexport default RadomColor"]},"metadata":{},"sourceType":"module"}