{"ast":null,"code":"var _jsxFileName = \"/Users/angela.yu/Desktop/my-app/src/App/RadomColor.js\";\nimport React, { useState, useEffect, useMemo } from 'react';\nimport * as R from 'ramda';\n\nfunction RadomColor({\n  isRadomPage\n}) {\n  const hasData = R.compose(R.not, R.either(R.isNil, R.isEmpty));\n  const BOX_NUMBER = 2;\n  let box = [];\n  const [data, setData] = useState(box);\n\n  function fetchColor() {\n    const r = () => Math.floor(Math.random() * 256);\n\n    return `rgb(${r()},${r()},${r()})`;\n  }\n\n  const init = () => {\n    for (let i = 0; i < BOX_NUMBER; i++) {\n      const item = {\n        id: i,\n        color: fetchColor()\n      };\n      box.push(item);\n    }\n\n    setData(box);\n  };\n\n  useMemo(() => {\n    init();\n  }, []);\n\n  const changeColor = id => {\n    const item = {\n      'id': id,\n      'color': fetchColor()\n    };\n    box.splice(id, 1, item); // const newData = oldBox.concat(item)\n\n    setData(box);\n    console.log('box', box);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"RadomColor\",\n    style: {\n      display: isRadomPage ? 'flex' : 'none'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, hasData(data) && data.map(item => React.createElement(\"div\", {\n    className: \"radomDiv\",\n    key: item.id,\n    id: item.id,\n    style: {\n      backgroundColor: item.color\n    },\n    onClick: () => {\n      changeColor(item.id);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })));\n}\n\nexport default RadomColor;","map":{"version":3,"sources":["/Users/angela.yu/Desktop/my-app/src/App/RadomColor.js"],"names":["React","useState","useEffect","useMemo","R","RadomColor","isRadomPage","hasData","compose","not","either","isNil","isEmpty","BOX_NUMBER","box","data","setData","fetchColor","r","Math","floor","random","init","i","item","id","color","push","changeColor","splice","console","log","display","map","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA2BC,SAA3B,EAAsCC,OAAtC,QAAqD,OAArD;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB;;AAEA,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAoC;AAClC,QAAMC,OAAO,GAAGH,CAAC,CAACI,OAAF,CACdJ,CAAC,CAACK,GADY,EAEdL,CAAC,CAACM,MAAF,CAASN,CAAC,CAACO,KAAX,EAAkBP,CAAC,CAACQ,OAApB,CAFc,CAAhB;AAKA,QAAMC,UAAU,GAAG,CAAnB;AACA,MAAIC,GAAG,GAAG,EAAV;AACA,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBf,QAAQ,CAACa,GAAD,CAA/B;;AAEA,WAASG,UAAT,GAAuB;AACrB,UAAMC,CAAC,GAAG,MAAMC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,GAAzB,CAAhB;;AACA,WAAQ,OAAMH,CAAC,EAAG,IAAGA,CAAC,EAAG,IAAGA,CAAC,EAAG,GAAhC;AACD;;AAED,QAAMI,IAAI,GAAG,MAAM;AACjB,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGV,UAAnB,EAA+BU,CAAC,EAAhC,EAAqC;AACnC,YAAMC,IAAI,GAAG;AACXC,QAAAA,EAAE,EAAEF,CADO;AAEXG,QAAAA,KAAK,EAAET,UAAU;AAFN,OAAb;AAIAH,MAAAA,GAAG,CAACa,IAAJ,CAASH,IAAT;AACD;;AACDR,IAAAA,OAAO,CAACF,GAAD,CAAP;AACD,GATD;;AAWAX,EAAAA,OAAO,CAAC,MAAM;AACZmB,IAAAA,IAAI;AACL,GAFM,EAEL,EAFK,CAAP;;AAIA,QAAMM,WAAW,GAAGH,EAAE,IAAI;AACxB,UAAMD,IAAI,GAAG;AACX,YAAMC,EADK;AAEX,eAASR,UAAU;AAFR,KAAb;AAIAH,IAAAA,GAAG,CAACe,MAAJ,CAAWJ,EAAX,EAAc,CAAd,EAAgBD,IAAhB,EALwB,CAMxB;;AACAR,IAAAA,OAAO,CAACF,GAAD,CAAP;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBjB,GAAlB;AAED,GAVD;;AAYA,SACI;AAAK,IAAA,SAAS,EAAG,YAAjB;AAA8B,IAAA,KAAK,EAAI;AAACkB,MAAAA,OAAO,EAAE1B,WAAW,GAAG,MAAH,GAAY;AAAjC,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,OAAO,CAACQ,IAAD,CAAP,IAAiBA,IAAI,CAACkB,GAAL,CAAST,IAAI,IAC7B;AACE,IAAA,SAAS,EAAG,UADd;AAEE,IAAA,GAAG,EAAIA,IAAI,CAACC,EAFd;AAGE,IAAA,EAAE,EAAID,IAAI,CAACC,EAHb;AAIE,IAAA,KAAK,EAAI;AAACS,MAAAA,eAAe,EAAEV,IAAI,CAACE;AAAvB,KAJX;AAKE,IAAA,OAAO,EAAI,MAAM;AACfE,MAAAA,WAAW,CAACJ,IAAI,CAACC,EAAN,CAAX;AACD,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADgB,CADpB,CADJ;AAeD;;AAED,eAAepB,UAAf","sourcesContent":["import React, { useState , useEffect, useMemo } from 'react'\nimport * as R from 'ramda'\n\nfunction RadomColor({ isRadomPage }){\n  const hasData = R.compose(\n    R.not,\n    R.either(R.isNil, R.isEmpty)\n  )\n  \n  const BOX_NUMBER = 2\n  let box = []\n  const [data,setData] = useState(box)\n  \n  function fetchColor () { \n    const r = () => Math.floor(Math.random()*256)\n    return `rgb(${r()},${r()},${r()})`\n  }\n\n  const init = () => {\n    for(let i = 0; i < BOX_NUMBER; i ++) {\n      const item = {\n        id: i,\n        color: fetchColor()\n      }\n      box.push(item)\n    }\n    setData(box)\n  }\n\n  useMemo(() => {\n    init()\n  },[])\n\n  const changeColor = id => {\n    const item = {\n      'id': id,\n      'color': fetchColor()\n    }\n    box.splice(id,1,item)\n    // const newData = oldBox.concat(item)\n    setData(box)\n    console.log('box',box)\n    \n  }\n  \n  return (\n      <div className = 'RadomColor' style = {{display: isRadomPage ? 'flex' : 'none'}}>\n        {hasData(data) && data.map(item => (\n          <div\n            className = \"radomDiv\"\n            key = {item.id}\n            id = {item.id}\n            style = {{backgroundColor: item.color }}\n            onClick = {() => {\n              changeColor(item.id)\n            }}\n          />\n        ))}\n      </div>\n  )\n}\n\nexport default RadomColor"]},"metadata":{},"sourceType":"module"}