{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/GitHub/my-app/src/App/RadomColor.js\";\nimport React, { useEffect, useMemo, useState } from 'react';\nimport * as R from 'ramda';\n\nfunction RadomColor({\n  isRadomPage\n}) {\n  // const init = () => {\n  //     //顏色字串\n  //     let colorStr=''\n  //     function color () { \n  //         const r = function () { return Math.floor(Math.random()*256) }\n  //         return colorStr = 'rgb(' + r() +',' + r() +',' + r() +')'\n  //     }\n  //     const Height = window.screen.height * 0.8\n  //     const Width = window.screen.width\n  //     const ulHeight = (Height - 110 )/8\n  //     const ulWidth = Width * 0.9\n  //     const liWidth = (ulWidth * 0.9)/8\n  //     //ul\n  //       for (let i=1;i<9;i++) { \n  //           const ul = document.createElement('ul')\n  //           document.querySelector('.RadomColor').appendChild(ul).style.width = ulWidth + 'px'      \n  //       }\n  //     //li \n  //       for (let j=0;j<8;j++) {\n  //           var x = document.querySelector('.RadomColor').querySelectorAll('ul');\n  //           for (let k=0;k<x.length;k++) {\n  //               let li = document.createElement('li')\n  //               color()\n  //               document.querySelector('.RadomColor').querySelectorAll('ul')[k].appendChild(li).style.height = ulHeight + 'px' \n  //               document.querySelector('.RadomColor').querySelectorAll('ul')[k].appendChild(li).style.width = liWidth + 'px' \n  //               document.querySelector('.RadomColor').querySelectorAll('ul')[k].appendChild(li).style.backgroundColor=colorStr\n  //           }\n  //       }\n  //     //click \n  //       document.querySelector('.RadomColor').addEventListener ('click', function(event) {\n  //           var targetElement = event.srcElement.localName\n  //           if (targetElement === 'li') {\n  //               color()\n  //               event.srcElement.style.backgroundColor = colorStr\n  //           }\n  //       })\n  //   }\n  // const init = () => {\n  const hasData = R.compose(R.not, R.either(R.isNil, R.isEmpty));\n  const BOX_NUMBER = 2;\n  let colorStr;\n\n  function color() {\n    const r = function () {\n      return Math.floor(Math.random() * 256);\n    };\n\n    return colorStr = `rgb(${r()},${r()},${r()})`;\n  }\n\n  const [data, setData] = useState([]);\n\n  for (let i = 0; i < BOX_NUMBER; i++) {\n    color();\n    const item = {};\n    item['id'] = i;\n    item['color'] = colorStr;\n    data.push(item);\n  }\n\n  const [onClick, setOnClick] = useState(false);\n\n  const changeColor = id => {\n    color();\n    const item = {};\n    item['id'] = id;\n    item['color'] = colorStr;\n    data.splice(id, 1, item);\n    setOnClick(true);\n    console.log(data.push(data)); // setData(data)\n  }; // }\n\n\n  let box;\n\n  if (onClick) {\n    box = data;\n  }\n\n  console.log(box);\n  return React.createElement(\"div\", {\n    className: \"RadomColor\",\n    style: {\n      display: isRadomPage ? 'flex' : 'none'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, hasData(data) && data.map(item => React.createElement(\"div\", {\n    className: \"radomDiv\",\n    key: item.id,\n    id: item.id,\n    style: {\n      backgroundColor: item.color\n    },\n    onClick: () => {\n      changeColor(item.id);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })));\n}\n\nexport default RadomColor;","map":{"version":3,"sources":["/Users/apple/Documents/GitHub/my-app/src/App/RadomColor.js"],"names":["React","useEffect","useMemo","useState","R","RadomColor","isRadomPage","hasData","compose","not","either","isNil","isEmpty","BOX_NUMBER","colorStr","color","r","Math","floor","random","data","setData","i","item","push","onClick","setOnClick","changeColor","id","splice","console","log","box","display","map","backgroundColor"],"mappings":"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","sourcesContent":["import React ,{ useEffect, useMemo, useState }from 'react'\nimport * as R from 'ramda'\n\nfunction RadomColor({ isRadomPage }){\n    // const init = () => {\n    //     //顏色字串\n    //     let colorStr=''\n    //     function color () { \n    //         const r = function () { return Math.floor(Math.random()*256) }\n    //         return colorStr = 'rgb(' + r() +',' + r() +',' + r() +')'\n    //     }\n    //     const Height = window.screen.height * 0.8\n    //     const Width = window.screen.width\n    //     const ulHeight = (Height - 110 )/8\n    //     const ulWidth = Width * 0.9\n    //     const liWidth = (ulWidth * 0.9)/8\n    //     //ul\n    //       for (let i=1;i<9;i++) { \n    //           const ul = document.createElement('ul')\n    //           document.querySelector('.RadomColor').appendChild(ul).style.width = ulWidth + 'px'      \n    //       }\n    //     //li \n    //       for (let j=0;j<8;j++) {\n    \n    //           var x = document.querySelector('.RadomColor').querySelectorAll('ul');\n    //           for (let k=0;k<x.length;k++) {\n    //               let li = document.createElement('li')\n    //               color()\n    //               document.querySelector('.RadomColor').querySelectorAll('ul')[k].appendChild(li).style.height = ulHeight + 'px' \n    //               document.querySelector('.RadomColor').querySelectorAll('ul')[k].appendChild(li).style.width = liWidth + 'px' \n    //               document.querySelector('.RadomColor').querySelectorAll('ul')[k].appendChild(li).style.backgroundColor=colorStr\n    //           }\n    //       }\n          \n          \n    //     //click \n    //       document.querySelector('.RadomColor').addEventListener ('click', function(event) {\n    //           var targetElement = event.srcElement.localName\n    \n    //           if (targetElement === 'li') {\n    //               color()\n    //               event.srcElement.style.backgroundColor = colorStr\n    //           }\n    //       })\n    //   }\n      \n      // const init = () => {\n\n     \n\n      const hasData = R.compose(\n        R.not,\n        R.either(R.isNil, R.isEmpty)\n      ) \n      \n      const BOX_NUMBER = 2\n\n      let colorStr\n      function color () { \n          const r = function () { return Math.floor(Math.random()*256) }\n          return colorStr = `rgb(${r()},${r()},${r()})`\n      }\n\n      \n      const [data,setData] = useState([])\n      for(let i = 0; i < BOX_NUMBER; i ++) {\n        color()\n        const item = {}\n        item['id'] = i\n        item['color'] = colorStr\n        data.push(item)\n        \n      }\n\n     const [onClick, setOnClick] = useState(false)\n      const changeColor = id => {\n        color()\n        const item = {}\n        item['id'] = id\n        item['color'] = colorStr\n        data.splice(id, 1, item)\n        setOnClick(true)\n        console.log(data.push(data))\n        // setData(data)\n      }\n    // }\n    let box\nif(onClick){\n   box = data\n}\n    console.log(box)\n\n      \n      return (\n        \n          <div className='RadomColor' style={{display: isRadomPage ? 'flex' : 'none'}}>\n            {hasData(data) && data.map(item => (\n                <div\n                  className = \"radomDiv\"\n                  key = {item.id}\n                  id = {item.id}\n                  style = {{backgroundColor: item.color }}\n                  onClick = {() => {\n                    changeColor(item.id)\n                  }}\n                />\n            ))}\n          </div>\n      \n      )\n}\n\nexport default RadomColor"]},"metadata":{},"sourceType":"module"}