{"ast":null,"code":"var _jsxFileName = \"/Users/angela.yu/Desktop/my-app/src/App/RadomColor.js\";\nimport React, { useState, useEffect } from 'react';\nimport * as R from 'ramda';\n\nfunction RadomColor({\n  isRadomPage\n}) {\n  const hasData = R.compose(R.not, R.either(R.isNil, R.isEmpty));\n  const BOX_NUMBER = 2;\n  const [color, setColor] = useState(''); // let colorStr\n\n  function fetchColor() {\n    const r = function () {\n      return Math.floor(Math.random() * 256);\n    };\n\n    return setColor(`rgb(${r()},${r()},${r()})`);\n  }\n\n  let box = [{\n    'id': 0,\n    'color': rgb(255, 255, 255)\n  }, {\n    'id': 1,\n    'color': color\n  }];\n  const [data, setData] = useState(box); // for(let i = 0; i < BOX_NUMBER; i ++) {\n  //   fetchColor()\n  //   const item = {}\n  //   item['id'] = i\n  //   item['color'] = color\n  //   box.push(item)\n  // }\n\n  const changeColor = id => {\n    fetchColor();\n    const item = {};\n    item['id'] = id;\n    item['color'] = color;\n    box.splice(id, 1, item);\n    setData(box);\n    console.log('click', data);\n  }; // useEffect(() => {\n  //   fetchColor()\n  // },[])\n\n\n  return React.createElement(\"div\", {\n    className: \"RadomColor\",\n    style: {\n      display: isRadomPage ? 'flex' : 'none'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, hasData(data) && data.map(item => React.createElement(\"div\", {\n    className: \"radomDiv\",\n    key: item.id,\n    id: item.id,\n    style: {\n      backgroundColor: item.color\n    },\n    onClick: () => {\n      changeColor(item.id);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })));\n}\n\nexport default RadomColor;","map":{"version":3,"sources":["/Users/angela.yu/Desktop/my-app/src/App/RadomColor.js"],"names":["React","useState","useEffect","R","RadomColor","isRadomPage","hasData","compose","not","either","isNil","isEmpty","BOX_NUMBER","color","setColor","fetchColor","r","Math","floor","random","box","rgb","data","setData","changeColor","id","item","splice","console","log","display","map","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA2BC,SAA3B,QAA2C,OAA3C;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB;;AAEA,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAoC;AAC9B,QAAMC,OAAO,GAAGH,CAAC,CAACI,OAAF,CACdJ,CAAC,CAACK,GADY,EAEdL,CAAC,CAACM,MAAF,CAASN,CAAC,CAACO,KAAX,EAAkBP,CAAC,CAACQ,OAApB,CAFc,CAAhB;AAKA,QAAMC,UAAU,GAAG,CAAnB;AAGA,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBb,QAAQ,CAAC,EAAD,CAAjC,CAT8B,CAU9B;;AACA,WAASc,UAAT,GAAuB;AACnB,UAAMC,CAAC,GAAG,YAAY;AAAE,aAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,GAAzB,CAAP;AAAsC,KAA9D;;AACA,WAAOL,QAAQ,CAAE,OAAME,CAAC,EAAG,IAAGA,CAAC,EAAG,IAAGA,CAAC,EAAG,GAA1B,CAAf;AACH;;AAED,MAAII,GAAG,GAAE,CACP;AACE,UAAM,CADR;AAEE,aAASC,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX;AAFd,GADO,EAKP;AACE,UAAM,CADR;AAEE,aAASR;AAFX,GALO,CAAT;AAWA,QAAM,CAACS,IAAD,EAAMC,OAAN,IAAiBtB,QAAQ,CAACmB,GAAD,CAA/B,CA3B8B,CA4B9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMI,WAAW,GAAGC,EAAE,IAAI;AACxBV,IAAAA,UAAU;AACV,UAAMW,IAAI,GAAG,EAAb;AACAA,IAAAA,IAAI,CAAC,IAAD,CAAJ,GAAaD,EAAb;AACAC,IAAAA,IAAI,CAAC,OAAD,CAAJ,GAAgBb,KAAhB;AACAO,IAAAA,GAAG,CAACO,MAAJ,CAAWF,EAAX,EAAe,CAAf,EAAkBC,IAAlB;AACAH,IAAAA,OAAO,CAACH,GAAD,CAAP;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBP,IAApB;AAED,GATD,CApC8B,CA+C9B;AAEA;AAEA;;;AACA,SACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAA4B,IAAA,KAAK,EAAE;AAACQ,MAAAA,OAAO,EAAEzB,WAAW,GAAG,MAAH,GAAY;AAAjC,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,OAAO,CAACgB,IAAD,CAAP,IAAiBA,IAAI,CAACS,GAAL,CAASL,IAAI,IAC3B;AACE,IAAA,SAAS,EAAG,UADd;AAEE,IAAA,GAAG,EAAIA,IAAI,CAACD,EAFd;AAGE,IAAA,EAAE,EAAIC,IAAI,CAACD,EAHb;AAIE,IAAA,KAAK,EAAI;AAACO,MAAAA,eAAe,EAAEN,IAAI,CAACb;AAAvB,KAJX;AAKE,IAAA,OAAO,EAAI,MAAM;AACfW,MAAAA,WAAW,CAACE,IAAI,CAACD,EAAN,CAAX;AACD,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADc,CADpB,CADJ;AAgBL;;AAED,eAAerB,UAAf","sourcesContent":["import React, { useState , useEffect} from 'react'\nimport * as R from 'ramda'\n\nfunction RadomColor({ isRadomPage }){\n      const hasData = R.compose(\n        R.not,\n        R.either(R.isNil, R.isEmpty)\n      ) \n      \n      const BOX_NUMBER = 2\n      \n      \n      const [color,setColor] = useState('')\n      // let colorStr\n      function fetchColor () { \n          const r = function () { return Math.floor(Math.random()*256) }\n          return setColor(`rgb(${r()},${r()},${r()})`)\n      }\n      \n      let box =[\n        {\n          'id': 0,\n          'color': rgb(255, 255, 255)\n        },\n        {\n          'id': 1,\n          'color': color\n        }\n      ]\n     \n      const [data,setData] = useState(box)\n      // for(let i = 0; i < BOX_NUMBER; i ++) {\n      //   fetchColor()\n      //   const item = {}\n      //   item['id'] = i\n      //   item['color'] = color\n      //   box.push(item)\n      // }\n\n      const changeColor = id => {\n        fetchColor()\n        const item = {}\n        item['id'] = id\n        item['color'] = color\n        box.splice(id, 1, item)\n        setData(box)\n        console.log('click',data)\n        \n      }\n\n      // useEffect(() => {\n\n      //   fetchColor()\n\n      // },[])\n      return (\n          <div className='RadomColor' style={{display: isRadomPage ? 'flex' : 'none'}}>\n            {hasData(data) && data.map(item => (\n                <div\n                  className = \"radomDiv\"\n                  key = {item.id}\n                  id = {item.id}\n                  style = {{backgroundColor: item.color }}\n                  onClick = {() => {\n                    changeColor(item.id)\n                  }}\n                />\n            ))}\n          </div>\n      \n      )\n}\n\nexport default RadomColor"]},"metadata":{},"sourceType":"module"}