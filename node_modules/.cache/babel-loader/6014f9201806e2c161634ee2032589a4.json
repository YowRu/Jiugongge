{"ast":null,"code":"var _jsxFileName = \"/Users/angela.yu/Desktop/my-app/src/App/RadomColor.js\";\nimport React, { useState, useMemo } from 'react';\nimport * as R from 'ramda';\n\nfunction RadomColor({\n  isRadomPage\n}) {\n  const hasData = R.compose(R.not, R.either(R.isNil, R.isEmpty));\n  const BOX_NUMBER = 64;\n  let box = [];\n  const [data, setData] = useState(box);\n  let colorStr;\n\n  function color() {\n    const r = function () {\n      return Math.floor(Math.random() * 256);\n    };\n\n    return colorStr = `rgb(${r()},${r()},${r()})`;\n  }\n\n  for (let i = 0; i < BOX_NUMBER; i++) {\n    color();\n    const item = {};\n    item['id'] = i;\n    item['color'] = colorStr;\n    box.push(item);\n  }\n\n  const changeColor = id => {\n    color();\n    const item = {};\n    item['id'] = id;\n    item['color'] = colorStr;\n    box.splice(id, 1, item);\n    setData(box);\n    console.log('click', data); // return box\n  };\n\n  const dataChange = useMemo(() => {\n    setData(box);\n    console.log();\n    return data;\n  }, [data, box]);\n  return React.createElement(\"div\", {\n    className: \"RadomColor\",\n    style: {\n      display: isRadomPage ? 'flex' : 'none'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, hasData(data) && data.map(item => React.createElement(\"div\", {\n    className: \"radomDiv\",\n    key: item.id,\n    id: item.id,\n    style: {\n      backgroundColor: item.color\n    },\n    onClick: () => {\n      changeColor(item.id);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })));\n}\n\nexport default RadomColor;","map":{"version":3,"sources":["/Users/angela.yu/Desktop/my-app/src/App/RadomColor.js"],"names":["React","useState","useMemo","R","RadomColor","isRadomPage","hasData","compose","not","either","isNil","isEmpty","BOX_NUMBER","box","data","setData","colorStr","color","r","Math","floor","random","i","item","push","changeColor","id","splice","console","log","dataChange","display","map","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,OAAzB,QAAwC,OAAxC;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB;;AAEA,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAoC;AAC9B,QAAMC,OAAO,GAAGH,CAAC,CAACI,OAAF,CACdJ,CAAC,CAACK,GADY,EAEdL,CAAC,CAACM,MAAF,CAASN,CAAC,CAACO,KAAX,EAAkBP,CAAC,CAACQ,OAApB,CAFc,CAAhB;AAKA,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAIC,GAAG,GAAE,EAAT;AACA,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBd,QAAQ,CAACY,GAAD,CAA/B;AACA,MAAIG,QAAJ;;AACA,WAASC,KAAT,GAAkB;AACd,UAAMC,CAAC,GAAG,YAAY;AAAE,aAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,GAAzB,CAAP;AAAsC,KAA9D;;AACA,WAAOL,QAAQ,GAAI,OAAME,CAAC,EAAG,IAAGA,CAAC,EAAG,IAAGA,CAAC,EAAG,GAA3C;AACH;;AAGD,OAAI,IAAII,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGV,UAAnB,EAA+BU,CAAC,EAAhC,EAAqC;AACnCL,IAAAA,KAAK;AACL,UAAMM,IAAI,GAAG,EAAb;AACAA,IAAAA,IAAI,CAAC,IAAD,CAAJ,GAAaD,CAAb;AACAC,IAAAA,IAAI,CAAC,OAAD,CAAJ,GAAgBP,QAAhB;AACAH,IAAAA,GAAG,CAACW,IAAJ,CAASD,IAAT;AACD;;AAED,QAAME,WAAW,GAAGC,EAAE,IAAI;AACxBT,IAAAA,KAAK;AACL,UAAMM,IAAI,GAAG,EAAb;AACAA,IAAAA,IAAI,CAAC,IAAD,CAAJ,GAAaG,EAAb;AACAH,IAAAA,IAAI,CAAC,OAAD,CAAJ,GAAgBP,QAAhB;AACAH,IAAAA,GAAG,CAACc,MAAJ,CAAWD,EAAX,EAAe,CAAf,EAAkBH,IAAlB;AACAR,IAAAA,OAAO,CAACF,GAAD,CAAP;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBf,IAApB,EAPwB,CAQxB;AACD,GATD;;AAUN,QAAMgB,UAAU,GAAG5B,OAAO,CAAC,MAAM;AAC/Ba,IAAAA,OAAO,CAACF,GAAD,CAAP;AACAe,IAAAA,OAAO,CAACC,GAAR;AACA,WAAOf,IAAP;AACD,GAJyB,EAIxB,CAACA,IAAD,EAAMD,GAAN,CAJwB,CAA1B;AAMM,SACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAA4B,IAAA,KAAK,EAAE;AAACkB,MAAAA,OAAO,EAAE1B,WAAW,GAAG,MAAH,GAAY;AAAjC,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,OAAO,CAACQ,IAAD,CAAP,IAAiBA,IAAI,CAACkB,GAAL,CAAST,IAAI,IAC3B;AACE,IAAA,SAAS,EAAG,UADd;AAEE,IAAA,GAAG,EAAIA,IAAI,CAACG,EAFd;AAGE,IAAA,EAAE,EAAIH,IAAI,CAACG,EAHb;AAIE,IAAA,KAAK,EAAI;AAACO,MAAAA,eAAe,EAAEV,IAAI,CAACN;AAAvB,KAJX;AAKE,IAAA,OAAO,EAAI,MAAM;AACfQ,MAAAA,WAAW,CAACF,IAAI,CAACG,EAAN,CAAX;AACD,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADc,CADpB,CADJ;AAgBL;;AAED,eAAetB,UAAf","sourcesContent":["import React, { useState,useMemo } from 'react'\nimport * as R from 'ramda'\n\nfunction RadomColor({ isRadomPage }){\n      const hasData = R.compose(\n        R.not,\n        R.either(R.isNil, R.isEmpty)\n      ) \n      \n      const BOX_NUMBER = 64\n      let box =[]\n      const [data,setData] = useState(box)\n      let colorStr\n      function color () { \n          const r = function () { return Math.floor(Math.random()*256) }\n          return colorStr = `rgb(${r()},${r()},${r()})`\n      }\n\n      \n      for(let i = 0; i < BOX_NUMBER; i ++) {\n        color()\n        const item = {}\n        item['id'] = i\n        item['color'] = colorStr\n        box.push(item)\n      }\n\n      const changeColor = id => {\n        color()\n        const item = {}\n        item['id'] = id\n        item['color'] = colorStr\n        box.splice(id, 1, item)\n        setData(box)\n        console.log('click',data)\n        // return box\n      }\nconst dataChange = useMemo(() => {\n  setData(box)\n  console.log()\n  return data\n},[data,box])\n\n      return (\n          <div className='RadomColor' style={{display: isRadomPage ? 'flex' : 'none'}}>\n            {hasData(data) && data.map(item => (\n                <div\n                  className = \"radomDiv\"\n                  key = {item.id}\n                  id = {item.id}\n                  style = {{backgroundColor: item.color }}\n                  onClick = {() => {\n                    changeColor(item.id)\n                  }}\n                />\n            ))}\n          </div>\n      \n      )\n}\n\nexport default RadomColor"]},"metadata":{},"sourceType":"module"}