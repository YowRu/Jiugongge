{"ast":null,"code":"var _jsxFileName = \"/Users/angela.yu/Desktop/my-app/src/App/RadomColor.js\";\nimport React, { useState, useEffect } from 'react';\nimport * as R from 'ramda';\n\nfunction RadomColor({\n  isRadomPage\n}) {\n  const hasData = R.compose(R.not, R.either(R.isNil, R.isEmpty));\n  const BOX_NUMBER = 2; // const [color,setColor] = useState('rgb(2,5,8)')\n\n  function fetchColor() {\n    const r = () => Math.floor(Math.random() * 256); // return setColor(`rgb(${r()},${r()},${r()})`)\n\n\n    return `rgb(${r()},${r()},${r()})`;\n  } // let box =[\n  //   {\n  //     'id': 0,\n  //     'color': 'rgb(255, 5, 255)'\n  //   },\n  //   {\n  //     'id': 1,\n  //     'color': 'rgb(255, 255, 5)'\n  //   }\n  // ]\n\n\n  let box = [];\n  const [data, setData] = useState(box);\n  console.log(data);\n\n  for (let i = 0; i < BOX_NUMBER; i++) {\n    // fetchColor()\n    const item = {\n      id: i,\n      color: fetchColor()\n    }; // item['id'] = i\n    // item['color'] = fetchColor()\n\n    box.push(item);\n  }\n\n  console.log('box', box);\n\n  const changeColor = id => {\n    const item = {\n      'id': id,\n      'color': fetchColor()\n    };\n    const oldBox = box.filter(item => item.id !== id);\n    const newData = oldBox.concat(item);\n    setData(newData);\n    console.log(newData, oldBox, item);\n  }; // useEffect(() => {\n  //   fetchColor()\n  // },[])\n\n\n  return React.createElement(\"div\", {\n    className: \"RadomColor\",\n    style: {\n      display: isRadomPage ? 'flex' : 'none'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, hasData(data) && data.map(item => React.createElement(\"div\", {\n    className: \"radomDiv\",\n    key: item.id,\n    id: item.id,\n    style: {\n      backgroundColor: item.color\n    },\n    onClick: () => {\n      changeColor(item.id);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  })));\n}\n\nexport default RadomColor;","map":{"version":3,"sources":["/Users/angela.yu/Desktop/my-app/src/App/RadomColor.js"],"names":["React","useState","useEffect","R","RadomColor","isRadomPage","hasData","compose","not","either","isNil","isEmpty","BOX_NUMBER","fetchColor","r","Math","floor","random","box","data","setData","console","log","i","item","id","color","push","changeColor","oldBox","filter","newData","concat","display","map","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA2BC,SAA3B,QAA2C,OAA3C;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB;;AAEA,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAoC;AAC9B,QAAMC,OAAO,GAAGH,CAAC,CAACI,OAAF,CACdJ,CAAC,CAACK,GADY,EAEdL,CAAC,CAACM,MAAF,CAASN,CAAC,CAACO,KAAX,EAAkBP,CAAC,CAACQ,OAApB,CAFc,CAAhB;AAKA,QAAMC,UAAU,GAAG,CAAnB,CAN8B,CAS9B;;AACA,WAASC,UAAT,GAAuB;AACnB,UAAMC,CAAC,GAAG,MAAMC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,GAAzB,CAAhB,CADmB,CAEnB;;;AACF,WAAQ,OAAMH,CAAC,EAAG,IAAGA,CAAC,EAAG,IAAGA,CAAC,EAAG,GAAhC;AACD,GAd6B,CAgB9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACD,MAAII,GAAG,GAAG,EAAV;AACC,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBnB,QAAQ,CAACiB,GAAD,CAA/B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;;AACA,OAAI,IAAII,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGX,UAAnB,EAA+BW,CAAC,EAAhC,EAAqC;AACnC;AACA,UAAMC,IAAI,GAAG;AACXC,MAAAA,EAAE,EAAEF,CADO;AAEXG,MAAAA,KAAK,EAAEb,UAAU;AAFN,KAAb,CAFmC,CAMnC;AACA;;AACAK,IAAAA,GAAG,CAACS,IAAJ,CAASH,IAAT;AACD;;AACDH,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBJ,GAAnB;;AAEA,QAAMU,WAAW,GAAGH,EAAE,IAAI;AACxB,UAAMD,IAAI,GAAG;AACX,YAAMC,EADK;AAEX,eAASZ,UAAU;AAFR,KAAb;AAKA,UAAMgB,MAAM,GAAGX,GAAG,CAACY,MAAJ,CAAWN,IAAI,IAAGA,IAAI,CAACC,EAAL,KAAYA,EAA9B,CAAf;AAEA,UAAMM,OAAO,GAAGF,MAAM,CAACG,MAAP,CAAcR,IAAd,CAAhB;AACAJ,IAAAA,OAAO,CAACW,OAAD,CAAP;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAYS,OAAZ,EAAoBF,MAApB,EAA2BL,IAA3B;AAED,GAZD,CAzC8B,CAuD9B;AAEA;AAEA;;;AACA,SACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAA4B,IAAA,KAAK,EAAE;AAACS,MAAAA,OAAO,EAAE5B,WAAW,GAAG,MAAH,GAAY;AAAjC,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,OAAO,CAACa,IAAD,CAAP,IAAiBA,IAAI,CAACe,GAAL,CAASV,IAAI,IAC7B;AACE,IAAA,SAAS,EAAG,UADd;AAEE,IAAA,GAAG,EAAIA,IAAI,CAACC,EAFd;AAGE,IAAA,EAAE,EAAID,IAAI,CAACC,EAHb;AAIE,IAAA,KAAK,EAAI;AAACU,MAAAA,eAAe,EAAEX,IAAI,CAACE;AAAvB,KAJX;AAKE,IAAA,OAAO,EAAI,MAAM;AACfE,MAAAA,WAAW,CAACJ,IAAI,CAACC,EAAN,CAAX;AACD,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADgB,CADpB,CADJ;AAgBL;;AAED,eAAerB,UAAf","sourcesContent":["import React, { useState , useEffect} from 'react'\nimport * as R from 'ramda'\n\nfunction RadomColor({ isRadomPage }){\n      const hasData = R.compose(\n        R.not,\n        R.either(R.isNil, R.isEmpty)\n      )\n      \n      const BOX_NUMBER = 2\n      \n      \n      // const [color,setColor] = useState('rgb(2,5,8)')\n      function fetchColor () { \n          const r = () => Math.floor(Math.random()*256)\n          // return setColor(`rgb(${r()},${r()},${r()})`)\n        return `rgb(${r()},${r()},${r()})`\n      }\n      \n      // let box =[\n      //   {\n      //     'id': 0,\n      //     'color': 'rgb(255, 5, 255)'\n      //   },\n      //   {\n      //     'id': 1,\n      //     'color': 'rgb(255, 255, 5)'\n      //   }\n      // ]\n     let box = []\n      const [data,setData] = useState(box)\n      console.log(data)\n      for(let i = 0; i < BOX_NUMBER; i ++) {\n        // fetchColor()\n        const item = {\n          id: i,\n          color: fetchColor()\n        }\n        // item['id'] = i\n        // item['color'] = fetchColor()\n        box.push(item)\n      }\n      console.log('box', box)\n\n      const changeColor = id => {\n        const item = {\n          'id': id,\n          'color': fetchColor()\n        }\n       \n        const oldBox = box.filter(item =>item.id !== id)\n        \n        const newData = oldBox.concat(item)\n        setData(newData)\n        console.log(newData,oldBox,item)\n        \n      }\n\n      // useEffect(() => {\n\n      //   fetchColor()\n\n      // },[])\n      return (\n          <div className='RadomColor' style={{display: isRadomPage ? 'flex' : 'none'}}>\n            {hasData(data) && data.map(item => (\n              <div\n                className = \"radomDiv\"\n                key = {item.id}\n                id = {item.id}\n                style = {{backgroundColor: item.color }}\n                onClick = {() => {\n                  changeColor(item.id)\n                }}\n              />\n            ))}\n          </div>\n      \n      )\n}\n\nexport default RadomColor"]},"metadata":{},"sourceType":"module"}